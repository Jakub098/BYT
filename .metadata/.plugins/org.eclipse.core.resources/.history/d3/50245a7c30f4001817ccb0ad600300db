package b_Money;

import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;

public class BankTest {
	Currency SEK, DKK;
	Bank SweBank, Nordea, DanskeBank;
	
	@Before
	public void setUp() throws Exception {
		DKK = new Currency("DKK", 0.20);
		SEK = new Currency("SEK", 0.15);
		SweBank = new Bank("SweBank", SEK);
		Nordea = new Bank("Nordea", SEK);
		DanskeBank = new Bank("DanskeBank", DKK);
		SweBank.openAccount("Ulrika");
		SweBank.openAccount("Bob");
		Nordea.openAccount("Bob");
		DanskeBank.openAccount("Gertrud");
	}

	@Test
	public void testGetName() {
		assertEquals("Nordea", Nordea.getName());
	}

	@Test
	public void testGetCurrency() {
		assertEquals(SEK, SweBank.getCurrency());
	}

	@Test
	public void testOpenAccount() throws AccountExistsException, AccountDoesNotExistException {
		SweBank.openAccount("chucktesta");
		assertTrue(SweBank.existAccount("chucktesta"));
	}

	@Test
	public void testDeposit() throws AccountDoesNotExistException {
		Nordea.deposit("Bob", new Money(105, SEK));
		assertEquals(105, Nordea.getBalance("Bob"), 0);
	}

	@Test
	public void testWithdraw() throws AccountDoesNotExistException {
		SweBank.withdraw("Bob", new Money(500, SEK));
		assertEquals(500, SweBank.getBalance("Bob"), 0);
	}
	
	@Test
	public void testGetBalance() throws AccountDoesNotExistException {
		assertEquals(105, Nordea.getBalance("Bob"), 0);
	}
	
	@Test
	public void testTransfer() throws AccountDoesNotExistException {
		//Same Bank
		SweBank.transfer("Bob", "Ulrika", new Money(10, SEK));
		assertEquals(5, SweBank.getBalance("Bob"), 0);
		assertEquals(100, SweBank.getBalance("Ulrika"), 0);
		//Different Bank
		SweBank.transfer("Bob", Nordea, "Bob", new Money(5, SEK));
		assertEquals(0, SweBank.getBalance("Bob"), 0);
		assertEquals(5, Nordea.getBalance("Bob"), 0);
	}
	
	@Test
	public void testTimedPayment() throws AccountDoesNotExistException {
		DanskeBank.deposit("Gertrud", new Money(1234, DKK));
		DanskeBank.addTimedPayment("Gertrud", "1", 2, 0, new Money(1230, DKK), SweBank, "Bob");
		DanskeBank.tick();
		assertEquals(4, DanskeBank.getBalance("Bob"), 0);
		assertEquals(1230 / 0.20 * 0.15, SweBank.getBalance("Ulrika"), 0);
	}
}
